package searchCustom;

import java.util.ArrayList;
import java.util.HashSet;

import searchShared.NodeQueue;
import searchShared.Problem;
import searchShared.SearchObject;
import searchShared.SearchNode;

import world.GridPos;

public class CustomGraphSearch implements SearchObject {

	private HashSet<SearchNode> explored;
	private NodeQueue frontier;
	protected ArrayList<SearchNode> path;
	private boolean insertFront;

	/**
	 * The constructor tells graph search whether it should insert nodes to front or back of the frontier 
	 */
    public CustomGraphSearch(boolean bInsertFront) {
		insertFront = bInsertFront;
    }

	/**
	 * Implements "graph search", which is the foundation of many search algorithms
	 */
	public ArrayList<SearchNode> search(Problem p) {
		// The frontier is a queue of expanded SearchNodes not processed yet
		frontier = new NodeQueue();
		/// The explored set is a set of nodes that have been processed 
		explored = new HashSet<SearchNode>();
		// The start state is given
		GridPos startState = (GridPos) p.getInitialState();

		// Initialize the frontier with the start state  
		frontier.addNodeToFront(new SearchNode(startState));

		// Path will be empty until we find the goal.
		path = new ArrayList<SearchNode>();
		
		while(!frontier.isEmpty()){
			// Get the first node in the frontier
			SearchNode node = frontier.removeFirst();
			// Add it as explored
			explored.add(node);
			// Look through all of the adjacent nodes
			for(GridPos adjacentPos: p.getReachableStatesFrom(node.getState())){
				SearchNode adjacentNode = new SearchNode(adjacentPos, node);
				// If the adjacent node has not been explored we check if it's a goal state
				// and add it to the frontier
				if(!explored.contains(adjacentNode)){
					// If the adjacent state is the goal state we return the path
					if(p.isGoalState(adjacentPos)){
						path = adjacentNode.getPathFromRoot();
						return path;
					}
					// Depth first search
					if(insertFront)
						frontier.addNodeToFront(adjacentNode);
					// Breadth first search
					else
						frontier.addNodeToBack(adjacentNode);
				}
			}
		}
		// Could not find a path to the goal state
		return path;
	}

	/*
	 * Functions below are just getters used externally by the program 
	 */
	public ArrayList<SearchNode> getPath() {
		return path;
	}

	public ArrayList<SearchNode> getFrontierNodes() {
		return new ArrayList<SearchNode>(frontier.toList());
	}
	public ArrayList<SearchNode> getExploredNodes() {
		return new ArrayList<SearchNode>(explored);
	}
	public ArrayList<SearchNode> getAllExpandedNodes() {
		ArrayList<SearchNode> allNodes = new ArrayList<SearchNode>();
		allNodes.addAll(getFrontierNodes());
		allNodes.addAll(getExploredNodes());
		return allNodes;
	}

}
